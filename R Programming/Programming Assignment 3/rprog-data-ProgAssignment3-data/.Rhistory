rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Convert non-numeric num inputs
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state)
suppressWarnings(rank <- as.numeric(num))
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## Get the col number
coln <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else if(outcome == "pneumonia") {
23
} else {
stop("invalid outcome")
}
## Remove NAs
data <- data[complete.cases(data[,coln]),]
## Sort by state, rate and name
data <- data[order(data[7], data[coln], data[2]), ]
## Split by state
s <- split(data, data[7])
hospitals <- character(0)
states <- character(0)
for(name in names(s)){
hospName <- if(num == "best"){
s[[name]][1, 2]
} else if(num == "worst"){
tail(s[[name]], 1)[1, 2]
} else {
s[[name]][num, 2]
}
hospitals <- append(hospitals, hospName)
states <- append(states, name)
}
data.frame(hospital=hospitals, state=states)
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state)
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "best"), 3)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[ ,col_num])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[data_state.$State ,col_num])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[ ,col_num])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state)
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[state, ])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[state][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[state, ])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[[state]])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Check that specified outcome is valid
# 1) Coerce the relevant outcome columns to numeric; suppress warning that NAs were introduced by coercion
suppressWarnings(data[, 11] <- as.numeric(data[, 11])) # 30-day death rate heart attack
suppressWarnings(data[, 17] <- as.numeric(data[, 17])) # 30-day death rate heart failure
suppressWarnings(data[, 23] <- as.numeric(data[, 23])) # 30-day death rate penumonia
# 2) Create separate data frames for all possible states and outcomes
StatesList <- data.frame(State = names(tapply(data$State, data$State,length)), Count = tapply(data$State, data$State,length))
OutcomesList <- data.frame(Outcome = c("heart attack", "heart failure", "pneumonia"), Col_Index = c(11, 17, 23))
# 3) Check if an invalid outcome argument is passed to the function
if (nrow(OutcomesList[OutcomesList$Outcome == outcome, ]) == 0)
stop("invalid outcome")
hos_name <- character(0)
# Create vector of all hospital names and ranks per state, ranked by rate and hospital name
for (s in StatesList$State) {
state_data <- data[data$State == s, ]
colNum <- OutcomesList[OutcomesList$Outcome == outcome, 2]
state_data <- state_data[complete.cases(state_data[, colNum]), ]
state_data <- state_data[order(state_data[, colNum], state_data$Hospital.Name), ]
if (num == "best")
num <- 1
else if(num == "worst")
num <- nrow(state_data[, OutcomesList$Outcome == outcome])
else suppressWarnings(rank <- as.numeric(num))
hos_name <- c(hos_name, state_data[rank, ]$Hospital.Name)
}
# Return all hospitals per state for specified outcome and rank
return(data.frame(hospital = hos_name, state = StatesList$State))
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[[state]])
suppressWarnings(rank <- as.numeric(num))
data_state <- data_state[order(data_state$State, data_state[col_num], data_state$Hospital.Name), ]
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
# Read data & convert outcome columns to numeric
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
suppressWarnings(data[, 11] <- as.numeric(data[, 11])) # 30-day death rate heart attack
suppressWarnings(data[, 17] <- as.numeric(data[, 17])) # 30-day death rate heart failure
suppressWarnings(data[, 23] <- as.numeric(data[, 23])) # 30-day death rate penumonia
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Remove NAs
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[[state]])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Convert outcome column to numeric & remove NAs
suppressWarnings(data[, col_num]) <- as.numeric(data[, col_num])
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[[state]])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
# Read data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# Get the column number for chosen outcome; return error message if not valid
if(outcome == "heart attack")
col_num <- 11
else if(outcome == "heart failure")
col_num <- 17
else if(outcome == "pneumonia")
col_num <- 23
else stop("invalid outcome")
# Convert outcome column to numeric & remove NAs
suppressWarnings(data[, col_num] <- as.numeric(data[, col_num]))
data <- data[complete.cases(data[,col_num]),]
# Sort by state, rate and hospital name
data <- data[order(data$State, data[col_num], data$Hospital.Name), ]
# Split dataset per state
data_state <- split(data, data$State)
# Create hospital and state vectors for specified outcome and rank
hospital_list <- character(0)
state_list <- character(0)
for(state in names(data_state)){
if (num == "best")
num <- 1
if(num == "worst")
num <- nrow(data_state[[state]])
suppressWarnings(rank <- as.numeric(num))
hos_name <- data_state[[state]][rank, 2]
hospital_list <- c(hospital_list, hos_name)
state_list <- c(state_list, state)
}
return(data.frame(hospital=hospital_list, state=state_list))
}
tail(rankall("heart failure"), 10)
